// ViewController
private let collectionView = UIConllectionView(
	frame: .zero, 
	collectionVeiwLayout: ViewController.createLayout()
)

static func createLayout() -> UICollectionViewCompositionalLayout{
	// Item
	let item = NSCollectionLayoutItem(
		layoutSize: NSColletionLayoutSize(
			widthDimension: .fractionWidth(2/3),
			heightDimension: .fractionHeight(1)
		)
	)
	
	item.contentInsets = NSDirectionalEdgeInsets(
		top: 2,
		leading: 2,
		bottom: 2,
		trailing: 2
		
	)
	
	let verticalStackItem = NSCollectionLayoutItem(
		layoutSize: NSColletionLayoutSize(
			widthDimension: .fractionWidth(1),
			heightDimension: .fractionWidth(0.5)
		)
	)
	
	item.verticalStackItem = NSDirectionalEdgeInsets(
		top: 2,
		leading: 2,
		bottom: 2,
		trailing: 2
		
	)
	
	let verticalStackGroup = NSCollectionLayoutGroup.vertical(
		layoutSize: NSColletionLayoutSize(
			widthDimension: .fractionWidth(1/3),
			heightDimension: .fractionHeight(1)
		),
		subitem: item,
		count: 2
	)
	
	let tripleItem = NSCollectionLayoutItem(
		layoutSize: NSColletionLayoutSize(
			widthDimension: .fractionWidth(1),
			heightDimension: .fractionWidth(1)
		)
	)
	
	tripleItem.contentInsets = NSDirectionalEdgeInsets(
		top: 2,
		leading: 2,
		bottom: 2,
		trailing: 2
		
	)
	
	let tripletHorizontalGroup = NSCollectionLayoutGroup.horizontal(
		layoutSize: NSColletionLayoutSize(
			widthDimension: .fractionWidth(1.0),
			heightDimension: .fractionWidth(0.3)
		),
		subitem: tripleItem,
		count: 3
	)
	
	// Group
	
	let horizontalGroup = NSCollectionLayoutGroup.horizotal(
		layoutSize: NSColletionLayoutSize(
			widthDimension: .fractionWidth(1.0),
			heightDimension: .fractionWidth(0.7)
		),
		subitems: [
			item,
			verticalStackGroup
		],

	)
	
	let verticalGroup = NSCollectionLayoutGroup.vertical(
		layoutSize: NSColletionLayoutSize(
			widthDimension: .fractionWidth(1.0),
			heightDimension: .fractionHeight(1.0)
		),
		subitems: [
			horizontalGroup,
			tripletHorizontalGroup
		],

	)


	// Sections
	let section = NSCollectionLayoutSection(group: verticalGroup)
	
	
	// Return 
	return UICollectionViewCompositionalLayout(section: section)
}

override func viewDidLoad(){
	super.viewDidLoad()
	view.addSubView(collectionView)
	collection.register(MyCollectionViewCell.self,
		forCellWithReuseIdentifier: MyCollectionViewCell.identifier)
	collectionView.frame = view.bounds
	collectionView.backgroundColor = .white
	collectionView.dataSource = self
}

// numberOfItemsInSection
return 30

// cellForItemAt
let cell = collectionView.dequeReusableCell(withIdentfier: MyCollectionViewCell.identifier, for: indexPath)
return cell


///////////////////////////////////////////////////////////////////
class MyCollectionViewCell: UICollectionViewCell{

	static let identifier = "MyCollectionViewCell"

	private let imageView: UIImageView = {
		let imageView = UIImageView()
		imageView.clipsToBounds = true
		imageView.contentMode = .scaleAspectFill
		return imageView
	}()
	
	override init(frame: CGRect){
		super.init(frame: frame)
		contentView.addSubView(imageView)
		
		let images: [UIImage] = [
			UIImage(named: "image1",
			UIImage(named: "image2",
			UIImage(named: "image3",
			UIImage(named: "image4",
			UIImage(named: "image5",
		].compactMap({ $0 })
		imageView.image = images.randomElement()
		contentView.clipsToBounds = true
	}
	
	required init?(coder: NSCoder){
		fatalError()
	}
	
	override func layoutSubViews(){
		super.layoutSubViews()
		imageView.frame = contentView.bounds
	}
}
