struct CoreDataBootcamp: View {
	
	@StateObject var vm = CoreDataViewModel()
	
	@State var textFieldText: String = ""

	var body: some View{
		NavigationView{
			VStack(spacing:20){
				TextField("Add fruit here...", text: $textFieldText)
					.font(.headline)
					.padding(.leading)
					//.background(Color(.yellow))
					.frame(height: 55)
					.cornerRadius(10)
					.padding(.horizontal)
					
				Button(action: {
					guard textFieldText.isEmpty else { return} 
					vm.addFruit(text: textFieldText)
					textFieldText = ""
				}, label: {
					Text("Save")
						.font(.headline)
						.foregroundColor(.white)
						.frame(height: 55)
						.frame(maxWidth: .infinity)
						.background(Color())
						.cornerRadius(10
				})
				.padding(.horizontal)
					
				List{
					ForEach(vm.savedEnities) { eentity in
						Text(entity.name ?? "no name")	
							.onTapGesture{
								vm.updateFruit(entity: entity)
							}
					}
					.onDelete(perform: vm.deleteFruit)
				}
				.listStyle(PlainListStyle())
			}
			.navigationTitle("Fruits")
		}
	}
}

///////// create core data
swift file => go to down => Click on Data Model => "name of our db?
// Add Entity ( add attributes)
// 

class CoreDataViewModel: ObservableObject{

	@Published var savedEntities: [FruitEntity] = []

	let container : NSPersistentContainer

	init(){
		container = NSPersistentContainer(name: "FruitsContainer")
		container.loadPersistentStores{ (description, error) in 
			if let error = error{
				print("Error loading core data")
			}
			
		
		}
		fetchFruits()
	}
	
	func fetchFruits(){
		let request = NSFetchRequest<FruitEntity>(entityName: "FruitEnitity")
		do{
			saveEntites = try container.viewContext.fetch(request)
		}catch let error{
			print("Fetching error")
		}
		
	}
	
	func addFruit(text: String){
		let newFruit = FruitEntity(context: container.viewContext)
		newFruit.name = text
		saveData()

	}
	
	func updateFruit(entity: FruitEntity){
		let currentName = entity.name ?? ""
		let newName = currentName + "!" // change name by adding "!"
		entity.name = newName
		saveData()
	}
	
	func deleteFruit(indexSet: IndexSet){
		guard let index = indextSet.first else { return }
		let entity = saveEntites[index]
		contatiner.viewContext.delete(entity)
		saveData()
		
	}
	
	func saveData(){
		do{
			 try container.viewContext.save()
			 fetchFruits()
		}catch let error{
			print("Saving error")
		}
	}

}
