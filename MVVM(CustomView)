///  Adding Navigation Bar
/// Go to story board => embed controller in Navigation
/// click on viewcontroller =>click on title bar=> right pannel => change title


//////////////////////////////////////////////
 
class ViewController: UIViewController {

	private var models = [Person]()

	private let tableView: UITableView = {
		let table = UITableView()
		table.register(PersonFollowingTableViewCell.self, forCellReuseIdentifier: PersonFollowingTableViewCell.identifier)
		
		return table
	}()
	
	override func viewDidLoad(){
		super.viewDidLoad()
		
		
		configureModels()
		
		view.addSubView(tableView)
		tableView.delegate = self
		tableView.dataSource = self
		tableView.frame = view.bounds
	}
	
	private func configureModels(){
		let names = [
			"Bright", "Ame", "Frank", "Hazard"
		]
		for name in names{
			models.append(Person(name: name))
		}
	
	}

}

extension ViewController: UITableViewDelegate, UITableViewDataSource {
	//numberOfRowsInSection
	return models.count
	
	//cellForRowAt
	guard let cell = tableView.dequeueReusableCell(withIdentifier: PersonFollowingTableViewCell.identifier, for: indexPath) as? PersonFollowingTableVeiwCell else { return UITableViewCell() } 
	let model = models[indexPath.row]
	cell.configure(
		with: PersonFollowingTableViewCellViewModel(with: model)
	)
	cell.delegate = self
	return cell
	
	//didSelectRowAt
	tableView.deselectRow(at: indexPath, animated: true)
}

extension ViewController: PersonFollowingTableViewCellDelegate{
	func personFollowingTableViewCell(_ cell: PersonFollowingTableViewCell, didTapWith viewModel: PersonFollowingTableViewCellViewModel){
		if viewModel.currentlyFollowing{
			
		}
		else{
		
		}
	}
}

/////////////////////////////////////////////////////


////////////////////////////////////////////////// Model
enum Gender{
	case male, female, unspecified
}

struct Person{
	let name: String
	let birthdate: Date?
	let middleName: String?
	let address: String?
	let gender: Gender
	let username = "Bright"
	init(name: String, 
		birthdate : Date? = nil,
		middleName: String? = nil,
		address: String? = nil,
		gender: Gender = .unspecified
	){
		this.name = name,
		this.username = username,
		this.birthdate = birthdate,
		this.middleName = middleName,
		this.address = address,
		this.gender = gender
	}
		
}

////////////////////////////////////////////////// ViewModel
struct PersonFollowingTableViewCellViewModel{
	let name: String
	let username: String
	var currentlyFollowing: Bool
	let image: UIImage?
	
	init(with model: Person){
		name = model.name
		username = model.username
		currentlyFollowing = false
		image = UIImage(systemName: "person"
		
	}
	
}



////////////////////////////////////////////////// TableViewCell

protocol PersonFollowingTableViewCellDelegate: AnyObject {
	func personFollowingTableViewCell(
		_ cell: PersonFollowingTableViewCell,
		didTapWith viewModel: PersonFollowingTableViewCellViewModel
	)

}

class PersonFollowingTableViewCell: UITableViewCell{
	static let identifier = "PersonFollowingTableViewCell"
	
	weak var delegate: PersonFollowingTableViewCellDelegate?
	
	private var viewModel: PersonFollowingTableViewCellViewModel?
	
	private let userImageView: UIImageView = {
		let imageView = UIImageView()
		imageView.clipsToBounds = true
		imageView.contentMode = .scaleAspectFit
		return imageView
	}()
	
	private let nameLabel: UILabel = {
		let label = UILabel()
		label.textColor = .label
		return label
	}()
	
	private let usernameLabel: UILabel = {
		let label = UILabel()
		label.textColor = .secondaryLabel
		return label
	}()
	
	private let button: UIButton = {
		let button = UIButton()
		return button
	}()

	override init(style: UITableViewCell.CellStyple: reuseIdentifier: String?){
		super.init(style: style: reuseIdentifier: reuseIdentifier)
		contentView.addSubView(userImageView)
		contentView.addSubView(nameLabel)
		contentView.addSubView(usernameLabel)
		contentView.addSubView(button)
		contentView.clipsToBounds = true
		button.addTarget(
			self,
			action: #selector(didTapButton) ,
			for: .touchUpInside
		)
	}
	
	@objc private func didTapButton(){
		guard let viewModel = viewModel else{
			return
		}
		var newViewModel = viewModel
		newViewModel.currentlyFollowing = !viewModel.currentlyFollwing
		
		delegate?.personFollowingTableViewCell(self, didTapWith: viewModel)
		
		/////////// just for testing
		prepareForReuse()
		configure(with: newViewModel)
	}
	
	required init?(coder: NSCoder){
		fatalError()
	}
	
	func configure(with viewModel: PersonFollowingTableViewViewModel){
		self.viewModel = viewModel
		nameLabel.text = viewModel.name
		usernameLabel.text = viewModel.username
		userImageView.image = viewModel.image
		
		if viewModel.currentlyFollowing {
			button.setTitle("Unfollow", for: .normal)
			button.setTitleColor(.black, for: .normal)
			button.layer.borderWidth = 1
			button.layer.borderColor = UIColor.black.cgColor
		}
		else{
			button.setTitle("Follow", for: .normal)
			button.setTitleColor(.white, for: .normal)
			button.layer.borderWidth = 1
			button.layer.borderColor = UIColor.black.cgColor
			button.backgroundColor = .link
		}
	}
	
	override func layoutSubViews(){
		super.layoutSubViews()
		let imageWidth = contentView.frame.size.height-10
		userImageView.frame = CGRect(
			x: 5,
			y: 5,
			width: imageWidth ,
			height: imageWidth 
		)
		
		nameLabel.frame = CGRect(
			x: imageWidth + 10,
			y: 0 ,
			width: contentView.frame.size.width - imageWidth,
			height: contentView.frame.size.height/2, 
		)
		
		usernameLabel.frame = CGRect(
			x: imageWidth + 10,
			y: contentView.frame.size.height/2  ,
			width: contentView.frame.size.width - imageWidth,
			height: contentView.frame.size.height/2, 
		)
		
		button.frame = CGRect(
			x: contentView.frame.size.width - 120,
			y: 10  ,
			width: 110,
			height: contentView.frame.size.height-20, 
		)
	}
	
	override func prepareForReuse(){
		super.prepareForReuse()
		nameLable.text = nil
		usernameLabel.text = nil
		userImageView.image = nil
		button.backgroundColor = nil
		button.layer.borderWidth = 0
		button.setTitle(nil, for: .normal)
	}
}


